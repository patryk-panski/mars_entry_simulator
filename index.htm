<!DOCTYPE HTML>
<html lang="en-GB">
    <head>
      <!--metadata about an HTML document-->
      <meta charset="utf-8">
      <meta name="description" content="An interactive 3D martian entry simulation.">
      <meta name="author" content="Patryk Szczepanski">
      <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
      
      <title>Martian Entry Simulation</title>

      <!--CSS-->
      <link rel="stylesheet" href="style.css"/>

      <!--Libraries-->
      <!-- maths libraries -->
      <script src="scripts/lib/numeric-1.2.6.min.js"></script>
      <script src="scripts/lib/everpolate.browserified.min.js"></script>
      <!-- plots libraries -->
      <script src="scripts/lib/Chart.min.js"></script>
      <!-- graphics libraries -->
      <script src="scripts/lib/three.min.js"></script>
      <script src="scripts/lib/TrackballControls.js"></script>
      <script src="scripts/lib/Stats.js"></script>
      <script src="scripts/lib/THREEx.FullScreen.js"></script>
      <script src="scripts/lib/THREEx.KeyboardState.js"></script>
      <!-- controls libraries -->
      <script src="scripts/lib/dat.GUI.min.js"></script>

      <!--SIMULATION SCRIPT-->
      <script src="scripts/simulation.js" defer></script>

    </head>
    <body>
      <!--TITLE-->
      <header class="loaded">
        <h1>Mars Entry Simulation</h1>    
      </header>
    
      <main>
      <!-- INSTRUCTION -->
      <div class="loaded" id="instruction">
        <h2>Instructions</h2>
        <ol>
          <li>Change initial parameters using the user interface on the right.</li>
          <li>Press the CALCULATE button to calculate trajectory for specified inputs. It may take a while!</li>
          <li>Once trajectory is calculated, control the simulation with the user interface.</li>
          <li>Watch the live outputs of trajectory data on the left.</li>
          <li>Press any data point on the first plot to shift the simulation to that moment.</li>
          <li>Save your inputs for later reference using the small menu at the top of the UI.</li>
        </ol>
        <h2>&#10024; Goal &#10024;</h2>
        <p>Set initial parameters so that the lander can decelerate through the atmosphere until it reaches the right conditions to deploy a supersonic parachute. Those conditions are following:</p>
        <ul>
          <li>Altitude: above 8 km</li>
          <li>Mach number: 1.1 - 2.2</li>
          <li>Dynamic pressure: 239 - 850 Pa</li>
        </ul>
        <div class="close-button">
          <div class="leftright"></div>
          <div class="rightleft"></div>
        </div>
      </div>
      
      <section id="outputs">
        <!--ALTITUDE AND VELOCITY OUTPUTS-->
        <div class="loaded" id="livedata">
          <p>Altitude: <span id="altitude"></span></p>
          <p>Velocity: <span id="velocity"></span></p>
          <p>Dynamic Pressure: <span id="dynamicPress"></span></p>
          <p>Stagnation Temperature: <span id="tempNose"></span></p>
        </div>
        <!--LIVE PLOTS-->
        <div id="plots">
          <canvas class="loaded" id="plot1" width="400" height="250"></canvas>
          <canvas class="loaded" id="plot2" width="400" height="250"></canvas>
        </div>
      </section>
      
      <!-- MESSAGES -->
      <div id="successMessage" class="flex-container">
        <p class="flex-item1">Parachute can be safely deployed at this point! Congratulations!</p>           
          <div  class="close-button flex-item2">
            <div class="leftright"></div>
            <div class="rightleft"></div>
          </div>
      </div>
      
      <div id="failureMessage" class="flex-container">
        <p class="flex-item1">You haven't reached the right conditions to safely deploy a parachute. Try again!</p> 
          <div class="close-button flex-item2">
            <div class="leftright"></div>
            <div class="rightleft"></div>
          </div>
      </div>
      
      <div id="trajCalculated" class="flex-container">
        <p class="flex-item1">Trajectory has been calculated!</p>
        <div class="close-button flex-item2">
          <div class="leftright"></div>
          <div class="rightleft"></div>
        </div>
      </div>
      
      <div id="calcnotpressed" class="flex-container">
        <p class="flex-item1">Press CALCULATE button to save current options first.</p>
        <div class="close-button flex-item2">
          <div class="leftright"></div>
          <div class="rightleft"></div>
        </div>
      </div>
      
      <div id="pleasewait" class="flex-container">
        <p class="flex-item1">Please wait</p>
        <div class="lds-ripple flex-item2"><div></div><div></div></div>
      </div>

      <!--SIMULATION-->
      <div id="webgl"></div>

      <!-- PROGRESS BAR -->
      <div id="loading">
        <div>
          <p>Loading &#128640;</p>
          <div class="progress">
            <div class="progressbar"></div>
          </div>
        </div>
      </div>

      </main>
      
      <!-- FOOTNOTE -->
      <footer class="loaded">
      <div id="footnote"><p> Created by <b>Patryk&nbsp;Szczepanski</b>. <button>Help</button> <br/><br/>Based on the MATLAB Entry Simulation code by <b>Lisa&nbsp;Peacocke</b>. <br/>Created with invaluable support from <b>Dr&nbsp;Matthew&nbsp;Santer</b> and <b>Dr&nbsp;Paul&nbsp;Bruce</b> <br/>from Imperial College London.</p></div>
      </footer>

      <script>
        // defines instruction element behaviour
        const instruction = document.querySelector('#instruction'); // grab an instruction element
        document.querySelector('#instruction .close-button').addEventListener('click', () => instruction.style.visibility = "hidden", false); // when clicked hide the instruction
        document.querySelector('#footnote button').addEventListener('click', () => instruction.style.visibility = "visible", false); // when clicked show the instruction
      
        // defines success and failure messages behaviour
        const successMessage = document.querySelector("#successMessage");
        const failureMessage = document.querySelector("#failureMessage");
        const trajCalculated = document.querySelector("#trajCalculated");
        const calcnotpressed = document.querySelector("#calcnotpressed");
        document.querySelector("#successMessage .close-button").addEventListener("click", () => successMessage.style.visibility = "hidden", false); // when clicked hide success message
        document.querySelector("#failureMessage .close-button").addEventListener("click", () => failureMessage.style.visibility = "hidden", false); // when clicked hide failure message
        document.querySelector("#trajCalculated .close-button").addEventListener("click", () => trajCalculated.style.visibility = "hidden", false); // when clicked hide the notification about calculated trajectory
        document.querySelector("#calcnotpressed .close-button").addEventListener("click", () => calcnotpressed.style.visibility = "hidden", false); // when clicked hide the notification
      
        // when DOM is loaded run methods from main JS file
        document.addEventListener('DOMContentLoaded', () => { 
          // lander.defineMesh(); //(MODEL)
          livePlots.init(); //(VIEW)
          liveOutputs.init(); //(VIEW)
        
          //display the simulation after Mars textures have been loaded
          G.manager.onLoad = () => {
            document.querySelector('#loading').style.display = 'none'; // hide the progress bar
            document.querySelectorAll('.loaded').forEach(el => el.style.visibility = 'visible'); // show all relevant elements 
            G.animate(); //(VIEW)
            setupGUI(); //(CONTROLLER)
          };
        }, false);
      </script>
    </body>
</html>
